import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;

public class InterviewQuestions2_1 {
    
    /**
     * remove duplicates without using extra space
     * TODO when it comes to deletion operation, very very carefull about use number index, such as for(i), while loop
     * it is better use iterator to traverse it.
     * @param list
     * @return
     */
    
    //TODO should be familiar with user-defined comparator which must implements Comparator<>
    //TODO myComparater would be static class or not depends on invoking methods , invoking position; please see chapt2 notes
    public static class myComparater implements Comparator<Integer> {
        @Override
        public int compare(Integer o1, Integer o2) {
            return o1.compareTo(o2);
        }
    }
    
    /**
     * this is my answer, use sorting, but the relative order of original list
     * @param list
     * @return
     */
    //FIXME do not use for loop and while loop to process ArrayList and LinkedList, when relate to remove()
    //FIXME please use iterator to process it
    public static LinkedList<Integer> rmDupFromLinkedlist(LinkedList<Integer> list) {
        if(list.size() == 0)
            return null;
        //FIXME Arrays.sort used for array
        //FIXME, Collections.sort used for list, or subclass of list, or implementing class of list
        Collections.sort(list, new myComparater());
        Iterator<Integer> iter = list.iterator();
        int temp = iter.next(); //TODO this is first element in LinkedList
        while(iter.hasNext()) {
            int cur = iter.next();
            if(cur == temp)
                iter.remove();  //Removes from the collection the last element returned by this iterator. Please see java docs
            else
                temp = cur;
        }
        return list;
    }

    public static void main(String[] args) {
        int [] test = new int[]{3,3,6,6,1,1}; //TODO this is a way to initialize it;
        
        //TODO this is a way to convert a int[] to list
        LinkedList<Integer> intList = new LinkedList<Integer>();
        for (int index = 0; index < test.length; index++)
        {
            intList.add(test[index]);
        }
        System.out.println(InterviewQuestions2_1.rmDupFromLinkedlist(intList));
    }
    
}

Please read this:

There are eight primitive types in Java. Since Java still has these primitive types, hence it cannot be said that 
Java is PURE OBJECT ORIENTED LANGUEAGE. Hence Java is said to be OBJECT ORIENTED but NOT PURE OBJECT ORIENTED
LANGUAGE.

The eight primitive types are:
(Source: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html)
char
byte
short
int
long
float
double
boolean

Whereas the following are the datatypes in Java:
String (Please note that in String S is capital)
char
byte
short
int
long
float
double
boolean

Every primitive type has its own wrapper class and their respective important methods used while 
implementing Comparator or Comparable interface are:


Character -> compare(char x, char y) , compareTo(Character anotherCharacter) "compareTo compares Character objects" 
Byte -> compareTo(Byte anotherByte) "Byte wrapper class does not have compare method"
Short -> compare(short x, short y) , compareTo(Short anotherShort)
Integer -> compare(int x, int y) , compareTo(Integer anotherInteger)
Long -> compare(long x, long y) , compareTo(Long anotherLong)
Float -> compare(float f1, float f2) , compareTo(Float anotherFloat)
Double -> compare(double d1, double d2) , compareTo(Double anotherDouble)  
Boolean -> compare(boolean x, boolean y) , compareTo(Boolean b)
String -> compareTo(String anotherString) , compareToIgnoreCase(String str)  "In String, both compare and
compareTo methods have String objects"


Please NOTE: 
1) (VERY IMP) If we declare or initialize a string with small "s", it will give compilation ERROR.
String in Java is always defined and declared with capital "S"
2) As learned in the above mentioned IMP methods, compareTo() method always uses Object(also in case of Byte
Wrapper class), whereas compare() method always uses primitive data type(Byte wrapper class does not have
compare() method)
3) compare(T o1, T o2) method of Comparator<T> interface has both arguments as Objects
(Source: http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html)
compareTo(T o) method of Comparable<T> interface has arguments as Object
That means while overriding compare() and compareTo() methods we have to use ojects as arguments since
these methods are overridden from respective Comparator<T> and Comparable<T> interfaces
