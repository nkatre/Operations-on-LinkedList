/* Reverse a LinkedList both recursively and iteratively.
   LOGIC:
   Always remember for reversing the nodes, we require 3 references - PREV, CURRENT & NEXT.
   Out of which NEXT can be easily found since every node in a singly LL has data and next as parameters.
   THUS, NEXT can be found easily.
   Then we just have to point CURRENT.next to PREV
*/


// Recursive code
Node Reverse(Node current, Node pre)
{

// Please read the comments and follow them religiously. The numericals imply what to understand first.
      
      2. Node next=current.next;   // need to store the next node, inorder to continue the traversal till the end of the List
      1. current.next=pre;         // reversing is all about pointing to the prev node
        
      3.  if(next==null)            // but what if there is no next node
             return current;

      4. return Reverse(next,current);     // but what if there is next node
}

Node Reverse(Node head)
{
        if(head==null)
               return null;

        return Reverse(head,null);
}





//Iterative code
Node ReverseIterative(Node head)
{
        if(head==null)
                return null;
                
        Node pre=null;  // this statement 
        Node current=head;  // this statement is the same as the recursive approach
        
        while(current!=null)
        {
                Node next=current.next;  // this statement
                current.next=pre;    // and this statement are the same from the recursive method above
                
                pre=current;
                current=next;
        }
        
        return pre;        
}
